# -*- coding: utf-8 -*-
"""
Created on Wed Apr  3 16:12:29 2019

@author: amirl
"""

import numpy as np
import matplotlib.pyplot as mpl

xi=0
xf=1
n=20
h=(xf-xi)/n
tol=10**(-5)

yp=[1]
ys=0
y=[]
ye=1
x=np.arange(xi,xf+h,h)
print('x=', x)
print("")

#######################################################################
#RK4

def f(x,y1,y2):
    return y2

def g(x,y1,y2):
    return -((np.pi)**2)*(y1+1)/4
    
def k1(x,y1,y2):
    return f(x,y1,y2)

def l1(x,y1,y2):
    return g(x,y1,y2)

def k2(x,y1,y2,h):
    return f(x+h/2,y1+h*k1(x,y1,y2)/2,y2+h*l1(x,y1,y2)/2)

def l2(x,y1,y2,h):
    return g(x+h/2,y1+h*k1(x,y1,y2)/2,y2+h*l1(x,y1,y2)/2)

def k3(x,y1,y2,h):
    return f(x+h/2,y1+h*k2(x,y1,y2,h)/2,y2+h*l2(x,y1,y2,h)/2)

def l3(x,y1,y2,h):
    return g(x+h/2,y1+h*k2(x,y1,y2,h)/2,y2+h*l2(x,y1,y2,h)/2)

def k4(x,y1,y2,h):
    return f(x+h,y1+h*k3(x,y1,y2,h),y2+h*l3(x,y1,y2,h))

def l4(x,y1,y2,h):
    return g(x+h,y1+h*k3(x,y1,y2,h),y2+h*l3(x,y1,y2,h))

def rk41(x,y1,y2,h):
    return y1+(h/6)*(k1(x,y1,y2)+2*k2(x,y1,y2,h)+2*k3(x,y1,y2,h)+k4(x,y1,y2,h))

def rk42(x,y1,y2,h):
    return y2+(h/6)*(l1(x,y1,y2)+2*l2(x,y1,y2,h)+2*l3(x,y1,y2,h)+l4(x,y1,y2,h))

j=0
k=0

while j==0:
    print("y'=",yp)
    v1=[]
    v2=[]
    v1.append(ys)
    v2.append(yp[k])
    for i in range (0,len(x)-1):
        p=rk41(x[i],v1[i],v2[i],h)
        m=rk42(x[i],v1[i],v2[i],h)
        #g=v1[i]+f1(x[i], v1[i], v2[i])*h #euler's
        #m=v2[i]+f2(x[i], v1[i], v2[i])*h #method
        v1.append(p)
        v2.append(m)
    y.append(v1)


    print('y1=', v1)
    print('y2=', v2)
    print("")
    mpl.plot(x,v1)


    if len(yp)>1:
        z=yp[k-1]+(yp[k]-yp[k-1])*(ye-y[k-1][n])/(y[k][n]-y[k-1][n])
        yp.append(z)
        print("y'=",yp)
        print("y(",xf,")=", y[k][n])
        d=np.abs(y[k][n]-ye)
        print("d=",d)
        print("")
        if d<tol:
            j+=1
    
   
    if len(yp)==1:
        o=yp[k]*2
        yp.append(o)
    
    k+=1

mpl.show()
